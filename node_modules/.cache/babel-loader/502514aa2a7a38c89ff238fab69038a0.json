{"ast":null,"code":"var _jsxFileName = \"/Users/abdifatahdev/Desktop/React-world/Mosh/counter-app/src/components/counters.jsx\";\n// This component, we wanna render a list of counters:\nimport React, { Component } from \"react\";\nimport Counter from \"./removing_local_state\";\n\nclass Counters extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      counters: [{\n        id: 1,\n        value: 0\n      }, {\n        id: 2,\n        value: 0\n      }, {\n        id: 3,\n        value: 0\n      }, {\n        id: 4,\n        value: 0\n      }]\n    };\n\n    this.handleIncrement = counter => {\n      // Clone new array of counters from the above counters object\n      //But the object in this new array are exactly same as the one we have in the above counters object\n      const counters = [...this.state.counters]; //Find the index of the counter that we received as parameter\n\n      const index = counters.indexOf(counter); //Clone the counter at the given location so we can have different object than from the one in the above state\n\n      counters[index] = { ...counter\n      }; //Get the indices of counters object and increment its value\n\n      counters[index].value++; //Update the state\n\n      this.setState({\n        counters\n      });\n    };\n\n    this.handleReset = () => {\n      const counters = this.state.counters.map(c => {\n        c.value = 0;\n        return c;\n      });\n      this.setState({\n        counters: counters\n      });\n    };\n\n    this.handleDelete = counterId => {\n      //To update the state, we gonna create new array without a given above counter and then call setState component so react can update the satet\n      const counters = this.state.counters.filter(c => c.id !== counterId); // The above code created new array:\n      //Overide counters object with the above counters const:\n\n      this.setState({\n        counters: counters\n      }); //If key and value are same simplify to only one object\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleReset,\n      className: \"btn btn-primary btn-sm m-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }\n    }, \"Reset\"), this.state.counters.map(counter =>\n    /*#__PURE__*/\n    // Added this line (value={this.counter} selected={true}) to use props\n    React.createElement(Counter, {\n      key: counter.id,\n      onDelete: this.handleDelete,\n      onIncrement: this.handleIncrement // To simplify adding new property to our counter object in the future, we need to simplify like this:\n      ,\n      counter: counter //The above code took care of all the below ones:\n      // value={counter.value}\n      // selected={counter.selected}\n      // selected={true}\n      // id={counter.id}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default Counters;\n/*The difference between Props and state:\nProps include data that we give component \nwhereas state includes data the is local or private to that component \nso the other components can't access that state, \nit's completely internal to that component only.\nAnother point is that props are immutable, they are read only, can't be changed*/","map":{"version":3,"sources":["/Users/abdifatahdev/Desktop/React-world/Mosh/counter-app/src/components/counters.jsx"],"names":["React","Component","Counter","Counters","state","counters","id","value","handleIncrement","counter","index","indexOf","setState","handleReset","map","c","handleDelete","counterId","filter","render"],"mappings":";AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,wBAApB;;AAEA,MAAMC,QAAN,SAAuBF,SAAvB,CAAiC;AAAA;AAAA;AAAA,SAI/BG,KAJ+B,GAIvB;AACNC,MAAAA,QAAQ,EAAE,CACR;AAAEC,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,KAAK,EAAE;AAAhB,OADQ,EAER;AAAED,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,KAAK,EAAE;AAAhB,OAFQ,EAGR;AAAED,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,KAAK,EAAE;AAAhB,OAHQ,EAIR;AAAED,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,KAAK,EAAE;AAAhB,OAJQ;AADJ,KAJuB;;AAAA,SAc/BC,eAd+B,GAcZC,OAAD,IAAa;AAC7B;AACA;AACA,YAAMJ,QAAQ,GAAG,CAAC,GAAG,KAAKD,KAAL,CAAWC,QAAf,CAAjB,CAH6B,CAI7B;;AACA,YAAMK,KAAK,GAAGL,QAAQ,CAACM,OAAT,CAAiBF,OAAjB,CAAd,CAL6B,CAM7B;;AACAJ,MAAAA,QAAQ,CAACK,KAAD,CAAR,GAAkB,EAAE,GAAGD;AAAL,OAAlB,CAP6B,CAQ7B;;AACAJ,MAAAA,QAAQ,CAACK,KAAD,CAAR,CAAgBH,KAAhB,GAT6B,CAU7B;;AACA,WAAKK,QAAL,CAAc;AAAEP,QAAAA;AAAF,OAAd;AACD,KA1B8B;;AAAA,SA6B/BQ,WA7B+B,GA6BjB,MAAM;AAClB,YAAMR,QAAQ,GAAG,KAAKD,KAAL,CAAWC,QAAX,CAAoBS,GAApB,CAAyBC,CAAD,IAAO;AAC9CA,QAAAA,CAAC,CAACR,KAAF,GAAU,CAAV;AACA,eAAOQ,CAAP;AACD,OAHgB,CAAjB;AAIA,WAAKH,QAAL,CAAc;AAAEP,QAAAA,QAAQ,EAAEA;AAAZ,OAAd;AACD,KAnC8B;;AAAA,SAuC/BW,YAvC+B,GAuCfC,SAAD,IAAe;AAC5B;AACA,YAAMZ,QAAQ,GAAG,KAAKD,KAAL,CAAWC,QAAX,CAAoBa,MAApB,CAA4BH,CAAD,IAAOA,CAAC,CAACT,EAAF,KAASW,SAA3C,CAAjB,CAF4B,CAG5B;AACA;;AACA,WAAKL,QAAL,CAAc;AAAEP,QAAAA,QAAQ,EAAEA;AAAZ,OAAd,EAL4B,CAKW;AACxC,KA7C8B;AAAA;;AA+C/Bc,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEE;AACE,MAAA,OAAO,EAAE,KAAKN,WADhB;AAEE,MAAA,SAAS,EAAC,4BAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFF,EASG,KAAKT,KAAL,CAAWC,QAAX,CAAoBS,GAApB,CAAyBL,OAAD;AAAA;AACvB;AACA,wBAAC,OAAD;AACE,MAAA,GAAG,EAAEA,OAAO,CAACH,EADf;AAEE,MAAA,QAAQ,EAAE,KAAKU,YAFjB;AAGE,MAAA,WAAW,EAAE,KAAKR,eAHpB,CAIE;AAJF;AAKE,MAAA,OAAO,EAAEC,OALX,CAME;AACA;AACA;AACA;AACA;AAVF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFD,CATH,CADF;AA2BD;;AA3E8B;;AA8EjC,eAAeN,QAAf;AAEA","sourcesContent":["// This component, we wanna render a list of counters:\nimport React, { Component } from \"react\";\nimport Counter from \"./removing_local_state\";\n\nclass Counters extends Component {\n  // Instead of hard coding the Counter component,\n  //we can add array of counter object to our state property\n  //and render them using map() method:\n  state = {\n    counters: [\n      { id: 1, value: 0 },\n      { id: 2, value: 0 },\n      { id: 3, value: 0 },\n      { id: 4, value: 0 },\n    ],\n  };\n\n  //Create handleIncrement method after removing local state:\n  handleIncrement = (counter) => {\n    // Clone new array of counters from the above counters object\n    //But the object in this new array are exactly same as the one we have in the above counters object\n    const counters = [...this.state.counters];\n    //Find the index of the counter that we received as parameter\n    const index = counters.indexOf(counter);\n    //Clone the counter at the given location so we can have different object than from the one in the above state\n    counters[index] = { ...counter };\n    //Get the indices of counters object and increment its value\n    counters[index].value++;\n    //Update the state\n    this.setState({ counters });\n  };\n\n  // Create reset handler method just like handle Delete method:\n  handleReset = () => {\n    const counters = this.state.counters.map((c) => {\n      c.value = 0;\n      return c;\n    });\n    this.setState({ counters: counters });\n  };\n\n  // This is the rasing and handling delete event in th counter component\n  //To update the delete state we need to add counterId param\n  handleDelete = (counterId) => {\n    //To update the state, we gonna create new array without a given above counter and then call setState component so react can update the satet\n    const counters = this.state.counters.filter((c) => c.id !== counterId);\n    // The above code created new array:\n    //Overide counters object with the above counters const:\n    this.setState({ counters: counters }); //If key and value are same simplify to only one object\n  };\n\n  render() {\n    return (\n      <div>\n        {/* Add a button for resetting all the counters */}\n        <button\n          onClick={this.handleReset}\n          className=\"btn btn-primary btn-sm m-2\"\n        >\n          Reset\n        </button>\n\n        {this.state.counters.map((counter) => (\n          // Added this line (value={this.counter} selected={true}) to use props\n          <Counter\n            key={counter.id}\n            onDelete={this.handleDelete}\n            onIncrement={this.handleIncrement}\n            // To simplify adding new property to our counter object in the future, we need to simplify like this:\n            counter={counter}\n            //The above code took care of all the below ones:\n            // value={counter.value}\n            // selected={counter.selected}\n            // selected={true}\n            // id={counter.id}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Counters;\n\n/*The difference between Props and state:\nProps include data that we give component \nwhereas state includes data the is local or private to that component \nso the other components can't access that state, \nit's completely internal to that component only.\nAnother point is that props are immutable, they are read only, can't be changed*/\n"]},"metadata":{},"sourceType":"module"}