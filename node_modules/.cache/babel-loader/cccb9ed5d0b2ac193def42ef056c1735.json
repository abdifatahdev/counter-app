{"ast":null,"code":"var _jsxFileName = \"/Users/abdifatahdev/Desktop/React-world/Mosh/counter-app/src/App.js\";\nimport React, { Component } from \"react\";\nimport NavBar from \"./components/navbar\";\nimport Counters from \"./components/counters\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      counters: [{\n        id: 1,\n        value: 0\n      }, {\n        id: 2,\n        value: 0\n      }, {\n        id: 3,\n        value: 0\n      }, {\n        id: 4,\n        value: 0\n      }]\n    };\n\n    this.handleIncrement = counter => {\n      const counters = [...this.state.counters];\n      const index = counters.indexOf(counter);\n      counters[index] = { ...counter\n      };\n      counters[index].value++;\n      this.setState({\n        counters\n      });\n    };\n\n    this.handleReset = () => {\n      const counters = this.state.counters.map(c => {\n        c.value = 0;\n        return c;\n      });\n      this.setState({\n        counters: counters\n      });\n    };\n\n    this.handleDelete = counterId => {\n      const counters = this.state.counters.filter(c => c.id !== counterId);\n      this.setState({\n        counters: counters\n      });\n    };\n  }\n\n  render() {\n    return (\n      /*#__PURE__*/\n      // The reason we wrap React.Fragment is that we are returning multiple root elements from the render method\n      React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(NavBar, {\n        totalCounters: this.state.counters.filter(c => c.value).length,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"main\", {\n        className: \"container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Counters // Here we should pass the list of counters this.state.counters.\n      // This Counter comp it's controlled comp coz it doesn't have any state\n      //it simple receives data and methods to modify the data by a props so it's entirely controlled by its parent (app comp)\n      , {\n        counters: this.state.counters,\n        onReset: this.handleReset,\n        onIncrement: this.handleIncrement,\n        onDelete: this.handleDelete,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }\n      })))\n    );\n  }\n\n}\n\nexport default App;\n/*Because there is no parent and child relationship between two component\nand you want to share data with them, WE NEED TO LIFT THE STATE\nUP to the main parent which app component so the other component \ncan have same parent, and the app component, we gonna have\nthe state so we can pass in all the children using PROPS*/","map":{"version":3,"sources":["/Users/abdifatahdev/Desktop/React-world/Mosh/counter-app/src/App.js"],"names":["React","Component","NavBar","Counters","App","state","counters","id","value","handleIncrement","counter","index","indexOf","setState","handleReset","map","c","handleDelete","counterId","filter","render","length"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAO,WAAP;;AAEA,MAAMC,GAAN,SAAkBH,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAG1BI,KAH0B,GAGlB;AACNC,MAAAA,QAAQ,EAAE,CACR;AAAEC,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,KAAK,EAAE;AAAhB,OADQ,EAER;AAAED,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,KAAK,EAAE;AAAhB,OAFQ,EAGR;AAAED,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,KAAK,EAAE;AAAhB,OAHQ,EAIR;AAAED,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,KAAK,EAAE;AAAhB,OAJQ;AADJ,KAHkB;;AAAA,SAY1BC,eAZ0B,GAYPC,OAAD,IAAa;AAC7B,YAAMJ,QAAQ,GAAG,CAAC,GAAG,KAAKD,KAAL,CAAWC,QAAf,CAAjB;AACA,YAAMK,KAAK,GAAGL,QAAQ,CAACM,OAAT,CAAiBF,OAAjB,CAAd;AACAJ,MAAAA,QAAQ,CAACK,KAAD,CAAR,GAAkB,EAAE,GAAGD;AAAL,OAAlB;AACAJ,MAAAA,QAAQ,CAACK,KAAD,CAAR,CAAgBH,KAAhB;AACA,WAAKK,QAAL,CAAc;AAAEP,QAAAA;AAAF,OAAd;AACD,KAlByB;;AAAA,SAoB1BQ,WApB0B,GAoBZ,MAAM;AAClB,YAAMR,QAAQ,GAAG,KAAKD,KAAL,CAAWC,QAAX,CAAoBS,GAApB,CAAyBC,CAAD,IAAO;AAC9CA,QAAAA,CAAC,CAACR,KAAF,GAAU,CAAV;AACA,eAAOQ,CAAP;AACD,OAHgB,CAAjB;AAIA,WAAKH,QAAL,CAAc;AAAEP,QAAAA,QAAQ,EAAEA;AAAZ,OAAd;AACD,KA1ByB;;AAAA,SA4B1BW,YA5B0B,GA4BVC,SAAD,IAAe;AAC5B,YAAMZ,QAAQ,GAAG,KAAKD,KAAL,CAAWC,QAAX,CAAoBa,MAApB,CAA4BH,CAAD,IAAOA,CAAC,CAACT,EAAF,KAASW,SAA3C,CAAjB;AACA,WAAKL,QAAL,CAAc;AAAEP,QAAAA,QAAQ,EAAEA;AAAZ,OAAd;AACD,KA/ByB;AAAA;;AAiC1Bc,EAAAA,MAAM,GAAG;AACP;AAAA;AACE;AACA,0BAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAQE,oBAAC,MAAD;AACE,QAAA,aAAa,EAAE,KAAKf,KAAL,CAAWC,QAAX,CAAoBa,MAApB,CAA4BH,CAAD,IAAOA,CAAC,CAACR,KAApC,EAA2Ca,MAD5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QARF,eAWE;AAAM,QAAA,SAAS,EAAC,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEE,oBAAC,QAAD,CACE;AACA;AACA;AAHF;AAIE,QAAA,QAAQ,EAAE,KAAKhB,KAAL,CAAWC,QAJvB;AAKE,QAAA,OAAO,EAAE,KAAKQ,WALhB;AAME,QAAA,WAAW,EAAE,KAAKL,eANpB;AAOE,QAAA,QAAQ,EAAE,KAAKQ,YAPjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CAXF;AAFF;AA2BD;;AA7DyB;;AA+D5B,eAAeb,GAAf;AAEA","sourcesContent":["import React, { Component } from \"react\";\nimport NavBar from \"./components/navbar\";\nimport Counters from \"./components/counters\";\nimport \"./App.css\";\n\nclass App extends Component {\n  // Lifted the stateUp from counters component\n  //so app com can be the main parent\n  state = {\n    counters: [\n      { id: 1, value: 0 },\n      { id: 2, value: 0 },\n      { id: 3, value: 0 },\n      { id: 4, value: 0 },\n    ],\n  };\n  // The down below are METHODS that mutate the above STATE:\n  handleIncrement = (counter) => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter };\n    counters[index].value++;\n    this.setState({ counters });\n  };\n\n  handleReset = () => {\n    const counters = this.state.counters.map((c) => {\n      c.value = 0;\n      return c;\n    });\n    this.setState({ counters: counters });\n  };\n\n  handleDelete = (counterId) => {\n    const counters = this.state.counters.filter((c) => c.id !== counterId);\n    this.setState({ counters: counters });\n  };\n\n  render() {\n    return (\n      // The reason we wrap React.Fragment is that we are returning multiple root elements from the render method\n      <React.Fragment>\n        {/* Display the total number of counters on the navBar */}\n        {/* Pass counters array to the NavBar, either counters array or total number of counters */}\n        {/* so the Navbar itself doesn't do the calculation, we simply give a number  */}\n        {/* <NavBar totalCounters={this.state.counters.length}/> */}\n\n        {/* We could also take the above to the next level and filter only the counters with value greater than zero */}\n        {/* after that go to navbar comp and add span */}\n        <NavBar\n          totalCounters={this.state.counters.filter((c) => c.value).length}\n        />\n        <main className=\"container\">\n          {/* Modified Counters comp onReset, onDelete and so on */}\n          <Counters\n            // Here we should pass the list of counters this.state.counters.\n            // This Counter comp it's controlled comp coz it doesn't have any state\n            //it simple receives data and methods to modify the data by a props so it's entirely controlled by its parent (app comp)\n            counters={this.state.counters}\n            onReset={this.handleReset}\n            onIncrement={this.handleIncrement}\n            onDelete={this.handleDelete}\n          />\n        </main>\n      </React.Fragment>\n    );\n  }\n}\nexport default App;\n\n/*Because there is no parent and child relationship between two component\nand you want to share data with them, WE NEED TO LIFT THE STATE\nUP to the main parent which app component so the other component \ncan have same parent, and the app component, we gonna have\nthe state so we can pass in all the children using PROPS*/\n"]},"metadata":{},"sourceType":"module"}