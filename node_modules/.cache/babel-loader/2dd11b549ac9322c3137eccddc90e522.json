{"ast":null,"code":"var _jsxFileName = \"/Users/abdifatahdev/Desktop/React-world/Mosh/counter-app/src/components/counters.jsx\";\n// This component, we wanna render a list of counters:\nimport React, { Component } from \"react\";\nimport Counter from \"./counter\";\n\nclass Counters extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      counters: [{\n        id: 1,\n        value: 0\n      }, {\n        id: 2,\n        value: 0\n      }, {\n        id: 3,\n        value: 0\n      }, {\n        id: 4,\n        value: 0\n      }]\n    };\n\n    this.handleDelete = counterId => {\n      //To update the state, we gonna create new array without a given above counter and then call setState component so react can update the satet\n      const counters = this.state.counters.filter(c => c.id !== counterId); // The above code created new array:\n      //Overide counters object with the above counters const:\n\n      this.setState({\n        counters: counters\n      }); //If key and value are same simplify to only one object\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 7\n      }\n    }, this.state.counters.map(counter =>\n    /*#__PURE__*/\n    // Added this line (value={this.counter} selected={true}) to use props\n    React.createElement(Counter, {\n      key: counter.id,\n      onDelete: this.handleDelete // To simplify adding new property to our counter object in the future, we need to simplify like this:\n      ,\n      counter: counter //The above code took care of all the below ones:\n      // value={counter.value}\n      // selected={counter.selected}\n      // selected={true}\n      // id={counter.id}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default Counters;\n/*The difference between Props and state:\nProps include data that we give component \nwhereas state includes data the is local or private to that component \nso the other components can't access that state, \nit's completely internal to that component only.\nAnother point is that props are immutable, they are read only, can't be changed*/","map":{"version":3,"sources":["/Users/abdifatahdev/Desktop/React-world/Mosh/counter-app/src/components/counters.jsx"],"names":["React","Component","Counter","Counters","state","counters","id","value","handleDelete","counterId","filter","c","setState","render","map","counter"],"mappings":";AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,MAAMC,QAAN,SAAuBF,SAAvB,CAAiC;AAAA;AAAA;AAAA,SAI/BG,KAJ+B,GAIvB;AACNC,MAAAA,QAAQ,EAAE,CACR;AAAEC,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,KAAK,EAAE;AAAhB,OADQ,EAER;AAAED,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,KAAK,EAAE;AAAhB,OAFQ,EAGR;AAAED,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,KAAK,EAAE;AAAhB,OAHQ,EAIR;AAAED,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,KAAK,EAAE;AAAhB,OAJQ;AADJ,KAJuB;;AAAA,SAe/BC,YAf+B,GAefC,SAAD,IAAe;AAC5B;AACA,YAAMJ,QAAQ,GAAG,KAAKD,KAAL,CAAWC,QAAX,CAAoBK,MAApB,CAA4BC,CAAD,IAAOA,CAAC,CAACL,EAAF,KAASG,SAA3C,CAAjB,CAF4B,CAG5B;AACA;;AACA,WAAKG,QAAL,CAAc;AAAEP,QAAAA,QAAQ,EAAEA;AAAZ,OAAd,EAL4B,CAKW;AACxC,KArB8B;AAAA;;AAuB/BQ,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKT,KAAL,CAAWC,QAAX,CAAoBS,GAApB,CAAyBC,OAAD;AAAA;AACvB;AACA,wBAAC,OAAD;AACE,MAAA,GAAG,EAAEA,OAAO,CAACT,EADf;AAEE,MAAA,QAAQ,EAAE,KAAKE,YAFjB,CAGE;AAHF;AAIE,MAAA,OAAO,EAAEO,OAJX,CAKE;AACA;AACA;AACA;AACA;AATF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFD,CADH,CADF;AAkBD;;AA1C8B;;AA6CjC,eAAeZ,QAAf;AAEA","sourcesContent":["// This component, we wanna render a list of counters:\nimport React, { Component } from \"react\";\nimport Counter from \"./counter\";\n\nclass Counters extends Component {\n  // Instead of hard coding the Counter component,\n  //we can add array of counter object to our state property\n  //and render them using map() method:\n  state = {\n    counters: [\n      { id: 1, value: 0 },\n      { id: 2, value: 0 },\n      { id: 3, value: 0 },\n      { id: 4, value: 0 },\n    ],\n  };\n\n  // This is the rasing and handling delete event in th counter component\n  //To update the delete state we need to add counterId param\n  handleDelete = (counterId) => {\n    //To update the state, we gonna create new array without a given above counter and then call setState component so react can update the satet\n    const counters = this.state.counters.filter((c) => c.id !== counterId);\n    // The above code created new array:\n    //Overide counters object with the above counters const:\n    this.setState({ counters: counters }); //If key and value are same simplify to only one object\n  };\n\n  render() {\n    return (\n      <div>\n        {this.state.counters.map((counter) => (\n          // Added this line (value={this.counter} selected={true}) to use props\n          <Counter\n            key={counter.id}\n            onDelete={this.handleDelete}\n            // To simplify adding new property to our counter object in the future, we need to simplify like this:\n            counter={counter}\n            //The above code took care of all the below ones:\n            // value={counter.value}\n            // selected={counter.selected}\n            // selected={true}\n            // id={counter.id}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Counters;\n\n/*The difference between Props and state:\nProps include data that we give component \nwhereas state includes data the is local or private to that component \nso the other components can't access that state, \nit's completely internal to that component only.\nAnother point is that props are immutable, they are read only, can't be changed*/\n"]},"metadata":{},"sourceType":"module"}